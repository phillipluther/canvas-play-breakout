{"version":3,"sources":["constructors/Canvas.js","constructors/Hud.js","constructors/Ball.js","constructors/Paddle.js","constructors/Bricks.js","logic/handle-collisions.js","main.js"],"names":["Canvas","el","document","createElement","context","getContext","window","addEventListener","resize","bind","body","appendChild","innerHeight","innerWidth","canvasSize","setAttribute","Hud","canvas","lives","score","font","fillStyle","fillText","width","Ball","radius","speed","x","y","height","movingRight","movingDown","nextX","nextY","setNextPosition","beginPath","arc","Math","PI","fill","closePath","Paddle","offset","movingLeft","key","newX","maxX","rect","Bricks","cols","rows","offsetX","offsetY","brickPad","brickHeight","toClear","layout","createLayout","col","usableSpace","brickWidth","floor","brickLayout","row","brick","cleared","forEach","ball","paddle","bricks","onClear","ballMovingRight","ballMovingDown","ballX","ballY","ballRadius","paddleX","paddleY","paddleWidth","canvasWidth","brickX","brickY","gameLoop","hud","draw","requestAnimationFrame","clearRect","cancelAnimationFrame","alert","location","reload"],"mappings":"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","file":"main.deac9608.map","sourceRoot":"../src","sourcesContent":["export default class Canvas {\r\n    constructor() {\r\n        this.el = document.createElement('canvas');\r\n        this.context = this.el.getContext('2d');\r\n\r\n        window.addEventListener('resize', this.resize.bind(this));\r\n        this.resize();\r\n\r\n        document.body.appendChild(this.el);\r\n    }\r\n\r\n    resize() {\r\n        let {innerHeight, innerWidth} = window;\r\n        let canvasSize = (innerWidth > innerHeight) ? innerHeight : innerWidth;\r\n\r\n        this.el.setAttribute('width', canvasSize);\r\n        this.el.setAttribute('height', canvasSize);\r\n    }\r\n}\r\n","export default class Hud {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n        this.lives = 3;\r\n        this.score = 0;\r\n    }\r\n\r\n    draw() {\r\n        let {canvas, context, score, lives} = this;\r\n\r\n        context.font = '1.25rem monospace';\r\n        context.fillStyle = '#994900';\r\n        context.fillText(`Score: ${score}`, 40, 30);\r\n        context.fillText(`Lives: ${lives}`, canvas.width - 150, 30);\r\n    }\r\n}\r\n","export default class Ball {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n\r\n        // the ball size (0.5x, since ... radius)\r\n        this.radius = 10;\r\n\r\n        // how quickly the ball travels\r\n        this.speed = 6;\r\n\r\n        // starting position of the ball\r\n        this.x = canvas.width / 2;\r\n        this.y = canvas.height - 50;\r\n\r\n        // starting direction of the ball\r\n        this.movingRight = true;\r\n        this.movingDown = false;\r\n    }\r\n\r\n    setNextPosition() {\r\n        let {movingRight, movingDown, speed, x, y} = this;\r\n        let nextX = movingRight ? x + speed : x - speed;\r\n        let nextY = movingDown ? y + speed : y - speed;\r\n\r\n        this.x = nextX;\r\n        this.y = nextY;\r\n    }\r\n\r\n    draw() {\r\n        this.setNextPosition();\r\n        let {context, x, y, radius} = this;\r\n\r\n        context.beginPath();\r\n        context.arc(x, y, radius, 0, Math.PI * 2);\r\n        context.fillStyle = '#f90';\r\n        context.fill();\r\n        context.closePath();\r\n    }\r\n}\r\n","export default class Paddle {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n\r\n        this.speed = 8;\r\n\r\n        // paddle sizing/placement\r\n        this.width = 100;\r\n        this.height = 15;\r\n        this.offset = 30;\r\n\r\n        this.x = (canvas.width - this.width) / 2;\r\n        this.y = (canvas.height - this.height - this.offset);\r\n\r\n        this.movingLeft = false;\r\n        this.movingRight = false;\r\n\r\n        window.addEventListener('keydown', ({key}) => {\r\n            if (key === 'ArrowLeft') {\r\n                this.movingLeft = true;\r\n            } else if (key === 'ArrowRight') {\r\n                this.movingRight = true;\r\n            }\r\n        });\r\n\r\n        window.addEventListener('keyup', ({key}) => {\r\n            if (key === 'ArrowLeft') {\r\n                this.movingLeft = false;\r\n            } else if (key === 'ArrowRight') {\r\n                this.movingRight = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    draw() {\r\n        let {canvas, context, x, y, speed, movingLeft, movingRight, width, height} = this;\r\n        let newX = x;\r\n\r\n        if (movingLeft) {\r\n            newX = (x - speed > 0) ? x - speed : 0;\r\n        }\r\n\r\n        if (movingRight) {\r\n            let maxX = canvas.width - width;\r\n            newX = (x + speed < maxX) ? x + speed : maxX;\r\n        }\r\n\r\n        context.beginPath();\r\n        context.rect(newX, y, width, height);\r\n        context.fillStyle = '#f90';\r\n        context.fill();\r\n        context.closePath();\r\n\r\n        this.x = newX;\r\n    }\r\n}\r\n","export default class Bricks {\r\n    constructor(canvas, cols, rows) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n\r\n        // spacing around the grid of bricks\r\n        this.offsetX = 40;\r\n        this.offsetY = 60;\r\n        // spacing between invidual bricks\r\n        this.brickPad = 10;\r\n\r\n        this.brickHeight = 30;\r\n\r\n        this.toClear = cols * rows;\r\n        this.layout = this.createLayout(cols, rows);\r\n    }\r\n\r\n    createLayout(cols, rows) {\r\n        let {offsetX, offsetY, brickPad, brickHeight} = this;\r\n\r\n        let usableSpace = this.canvas.width - (offsetX * 2) - (cols * brickPad);\r\n        let brickWidth = Math.floor(usableSpace / cols);\r\n        let brickLayout = [];\r\n\r\n        let col = 0;\r\n\r\n        while (col < cols) {\r\n            let row = 0;\r\n\r\n            if (!brickLayout[col]) {\r\n                brickLayout[col] = [];\r\n            }\r\n\r\n            while (row < rows) {\r\n                let brick = {\r\n                    width: brickWidth,\r\n                    height: brickHeight,\r\n                    cleared: false,\r\n                    x: (col * (brickWidth + brickPad)) + offsetX,\r\n                    y: (row * (brickHeight + brickPad)) + offsetY\r\n                };\r\n\r\n                brickLayout[col][row] = brick;\r\n\r\n                row++;\r\n            }\r\n\r\n            col++;\r\n        }\r\n\r\n        return brickLayout;\r\n    }\r\n\r\n    draw() {\r\n        let {context, layout} = this;\r\n\r\n        layout.forEach(col => {\r\n            col.forEach(brick => {\r\n                let {cleared, x, y, width, height} = brick;\r\n\r\n                if (cleared) {\r\n                    return;\r\n                }\r\n\r\n                context.beginPath();\r\n                context.rect(x, y, width, height);\r\n                context.fillStyle = '#f90';\r\n                context.fill();\r\n                context.closePath();\r\n            });\r\n        });\r\n    }\r\n}\r\n","export default (ball, paddle, bricks, onClear) => {\r\n    let {\r\n        canvas,\r\n        movingRight: ballMovingRight,\r\n        movingDown: ballMovingDown,\r\n        x: ballX,\r\n        y: ballY,\r\n        radius: ballRadius\r\n    } = ball;\r\n    let {x: paddleX, y: paddleY, width: paddleWidth} = paddle;\r\n    let {width: canvasWidth} = canvas;\r\n\r\n    //\r\n    // bouncing off the left/right walls\r\n    //\r\n    if (ballMovingRight && ballX > canvasWidth - ballRadius) {\r\n        ball.movingRight = false;\r\n\r\n    } else if (!ballMovingRight && ballX < ballRadius) {\r\n        ball.movingRight = true;\r\n    }\r\n\r\n    //\r\n    // bouncing off the top/paddle\r\n    //\r\n    if (ballMovingDown) {\r\n        // bounced off the paddle?\r\n        let onPaddleTop = ballY > paddleY && ballY < paddleY + 3;\r\n        let insidePaddleEdges = (ballX > paddleX) && (ballX < paddleX + paddleWidth);\r\n\r\n        if (onPaddleTop && insidePaddleEdges) {\r\n            ball.movingDown = false;\r\n        }\r\n\r\n    } else {\r\n        if (ballY < ballRadius) {\r\n            ball.movingDown = true;\r\n        }\r\n    }\r\n\r\n    //\r\n    // bouncing off a brick\r\n    //\r\n    bricks.layout.forEach(col => {\r\n        col.forEach(brick => {\r\n            if (brick.cleared) {\r\n                return;\r\n            }\r\n\r\n            let {x: brickX, y: brickY, width: brickWidth, height: brickHeight} = brick;\r\n\r\n            let withinBrickX = (ballX > brickX) && (ballX < brickX + brickWidth);\r\n            let withinBrickY = (ballY > brickY) && (ballY < brickY + brickHeight);\r\n\r\n            if (withinBrickX && withinBrickY) {\r\n                brick.cleared = true;\r\n                bricks.toClear--;\r\n                ball.movingDown = !ball.movingDown;\r\n\r\n                if (onClear) {\r\n                    onClear(brick);\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n","import Canvas from './constructors/Canvas';\r\nimport Hud from './constructors/Hud';\r\nimport Ball from './constructors/Ball';\r\nimport Paddle from './constructors/Paddle';\r\nimport Bricks from './constructors/Bricks';\r\nimport handleCollisions from './logic/handle-collisions';\r\n\r\nlet gameLoop;\r\n\r\nlet canvas = new Canvas();\r\nlet hud = new Hud(canvas.el);\r\nlet ball = new Ball(canvas.el);\r\nlet paddle = new Paddle(canvas.el);\r\nlet bricks = new Bricks(canvas.el, 8, 5);\r\n\r\nfunction draw() {\r\n    gameLoop = window.requestAnimationFrame(draw);\r\n\r\n    canvas.context.clearRect(0, 0, canvas.el.width, canvas.el.height);\r\n\r\n    ball.draw();\r\n    paddle.draw();\r\n    bricks.draw();\r\n    hud.draw();\r\n\r\n    handleCollisions(ball, paddle, bricks, () => {\r\n        hud.score += 100;\r\n    });\r\n\r\n    if (ball.y > canvas.el.height + ball.radius) {\r\n\r\n        if (hud.lives > 0) {\r\n            hud.lives--;\r\n            ball = new Ball(canvas.el);\r\n\r\n        } else {\r\n            window.cancelAnimationFrame(gameLoop);\r\n            alert('Game over!');\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    if (bricks.toClear === 0) {\r\n        window.cancelAnimationFrame(gameLoop);\r\n        alert('You win!');\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\ndraw();\r\n"]}